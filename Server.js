const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const { createClient } = require('@supabase/supabase-js');
const bcrypt = require('bcryptjs');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

app.use(cors());
app.use(express.json());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏
const onlineUsers = new Map();
const typingUsers = new Map();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initializeDatabase() {
  try {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    const tables = [
      `CREATE TABLE IF NOT EXISTS users (
        id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
        username TEXT UNIQUE NOT NULL,
        email TEXT UNIQUE,
        password TEXT NOT NULL,
        avatar TEXT DEFAULT 'üë§',
        status TEXT DEFAULT '–í —Å–µ—Ç–∏',
        level INTEGER DEFAULT 1,
        experience INTEGER DEFAULT 0,
        registration_date TIMESTAMPTZ DEFAULT NOW(),
        last_seen TIMESTAMPTZ DEFAULT NOW()
      )`,
      
      `CREATE TABLE IF NOT EXISTS messages (
        id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
        sender_id UUID REFERENCES users(id),
        receiver_id UUID,
        content TEXT NOT NULL,
        message_type TEXT DEFAULT 'text',
        is_read BOOLEAN DEFAULT false,
        created_at TIMESTAMPTZ DEFAULT NOW()
      )`,
      
      `CREATE TABLE IF NOT EXISTS friendships (
        id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
        user_id UUID REFERENCES users(id),
        friend_id UUID REFERENCES users(id),
        status TEXT DEFAULT 'pending',
        created_at TIMESTAMPTZ DEFAULT NOW(),
        UNIQUE(user_id, friend_id)
      )`,
      
      `CREATE TABLE IF NOT EXISTS user_profiles (
        id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
        user_id UUID REFERENCES users(id) UNIQUE,
        bio TEXT DEFAULT '',
        location TEXT DEFAULT '',
        website TEXT DEFAULT '',
        avatar_url TEXT DEFAULT ''
      )`
    ];

    for (const tableSql of tables) {
      const { error } = await supabase.rpc('exec_sql', { sql: tableSql });
      if (error && !error.message.includes('already exists')) {
        console.log('–¢–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞:', error.message);
      }
    }

    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã:', error);
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/register', async (req, res) => {
  try {
    const { username, email, password } = req.body;

    if (!username || !password) {
      return res.status(400).json({ error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: existingUser } = await supabase
      .from('users')
      .select('id')
      .eq('username', username)
      .single();

    if (existingUser) {
      return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(password, 10);

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user, error } = await supabase
      .from('users')
      .insert([
        {
          username,
          email: email || null,
          password: hashedPassword,
          avatar: getRandomAvatar(),
          status: '–í —Å–µ—Ç–∏'
        }
      ])
      .select()
      .single();

    if (error) throw error;

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    await supabase
      .from('user_profiles')
      .insert([{ user_id: user.id }]);

    const { password: _, ...userData } = user;
    res.json({ user: userData, message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞' });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/login', async (req, res) => {
  try {
    const { username, password } = req.body;

    if (!username || !password) {
      return res.status(400).json({ error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è' });
    }

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user, error } = await supabase
      .from('users')
      .select('*')
      .eq('username', username)
      .single();

    if (error || !user) {
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const validPassword = await bcrypt.compare(password, user.password);
    if (!validPassword) {
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º last_seen
    await supabase
      .from('users')
      .update({ last_seen: new Date().toISOString() })
      .eq('id', user.id);

    const { password: _, ...userData } = user;
    res.json({ user: userData, message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω' });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/users/search', async (req, res) => {
  try {
    const { query } = req.query;
    
    const { data: users, error } = await supabase
      .from('users')
      .select('id, username, avatar, status, level')
      .ilike('username', `%${query}%`)
      .limit(20);

    if (error) throw error;

    res.json(users || []);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π
app.get('/api/users/:userId/friends', async (req, res) => {
  try {
    const { userId } = req.params;

    const { data: friendships, error } = await supabase
      .from('friendships')
      .select(`
        id,
        status,
        friend:users!friendships_friend_id_fkey(id, username, avatar, status, level)
      `)
      .eq('user_id', userId)
      .eq('status', 'accepted');

    if (error) throw error;

    const friends = friendships.map(f => f.friend);
    res.json(friends);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–∑–µ–π' });
  }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥—Ä—É–∂–±—ã
app.post('/api/friends/request', async (req, res) => {
  try {
    const { userId, friendId } = req.body;

    const { data: friendship, error } = await supabase
      .from('friendships')
      .insert([
        { user_id: userId, friend_id: friendId, status: 'pending' }
      ])
      .select()
      .single();

    if (error) throw error;

    res.json({ message: '–ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', friendship });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
app.get('/api/messages/:userId/:friendId', async (req, res) => {
  try {
    const { userId, friendId } = req.params;

    const { data: messages, error } = await supabase
      .from('messages')
      .select('*')
      .or(`and(sender_id.eq.${userId},receiver_id.eq.${friendId}),and(sender_id.eq.${friendId},receiver_id.eq.${userId})`)
      .order('created_at', { ascending: true })
      .limit(100);

    if (error) throw error;

    res.json(messages || []);
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π' });
  }
});

// Socket.io –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
io.on('connection', (socket) => {
  console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', socket.id);

  socket.on('user_online', async (userData) => {
    const user = {
      ...userData,
      socketId: socket.id,
      loginTime: new Date().toISOString()
    };

    onlineUsers.set(userData.id, user);
    socket.userId = userData.id;
    socket.username = userData.username;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
    await supabase
      .from('users')
      .update({ status: '–í —Å–µ—Ç–∏', last_seen: new Date().toISOString() })
      .eq('id', userData.id);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    io.emit('online_users_update', Array.from(onlineUsers.values()));

    console.log(`üë§ ${userData.username} –≤ —Å–µ—Ç–∏`);
  });

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  socket.on('send_private_message', async (data) => {
    try {
      const { receiverId, content, messageType = 'text' } = data;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
      const { data: message, error } = await supabase
        .from('messages')
        .insert([
          {
            sender_id: socket.userId,
            receiver_id: receiverId,
            content,
            message_type: messageType
          }
        ])
        .select()
        .single();

      if (error) throw error;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—é –µ—Å–ª–∏ –æ–Ω–ª–∞–π–Ω
      const receiver = onlineUsers.get(receiverId);
      if (receiver) {
        io.to(receiver.socketId).emit('new_private_message', message);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
      socket.emit('new_private_message', message);

      console.log(`üí¨ ${socket.username} -> ${receiverId}: ${content}`);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      socket.emit('message_error', { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' });
    }
  });

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—á–∞—Ç–∞–µ—Ç
  socket.on('typing_start', (data) => {
    const { receiverId } = data;
    typingUsers.set(socket.userId, {
      username: socket.username,
      receiverId,
      timestamp: Date.now()
    });

    const receiver = onlineUsers.get(receiverId);
    if (receiver) {
      io.to(receiver.socketId).emit('user_typing', {
        userId: socket.userId,
        username: socket.username
      });
    }
  });

  socket.on('typing_stop', (data) => {
    const { receiverId } = data;
    typingUsers.delete(socket.userId);

    const receiver = onlineUsers.get(receiverId);
    if (receiver) {
      io.to(receiver.socketId).emit('user_stop_typing', {
        userId: socket.userId
      });
    }
  });

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  socket.on('disconnect', async () => {
    if (socket.userId) {
      onlineUsers.delete(socket.userId);
      typingUsers.delete(socket.userId);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
      await supabase
        .from('users')
        .update({ status: '–ù–µ –≤ —Å–µ—Ç–∏', last_seen: new Date().toISOString() })
        .eq('id', socket.userId);

      io.emit('online_users_update', Array.from(onlineUsers.values()));

      console.log(`üë§ ${socket.username} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`);
    }
  });
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getRandomAvatar() {
  const avatars = ['üë§', 'üë®', 'üë©', 'üßë', 'üë¶', 'üëß', 'ü¶∏', 'ü¶π', 'üßô', 'üßö', 'üßõ', 'üßú'];
  return avatars[Math.floor(Math.random() * avatars.length)];
}

// Health check
app.get('/health', async (req, res) => {
  try {
    const { data, error } = await supabase
      .from('users')
      .select('count')
      .limit(1);

    res.json({
      status: 'healthy',
      database: error ? 'disconnected' : 'connected',
      online_users: onlineUsers.size,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({ status: 'unhealthy', error: error.message });
  }
});

// –°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;

async function startServer() {
  await initializeDatabase();
  
  server.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì± Local Messenger –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ`);
    console.log(`üë• –û–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${onlineUsers.size}`);
  });
}

startServer();
