const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const path = require('path');

const app = express();
const server = http.createServer(app);

const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  },
  pingTimeout: 60000,
  pingInterval: 25000
});

app.use(cors());
app.use(express.json());

// –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è pkg
app.use(express.static(path.join(__dirname, 'public')));

app.get('/', function(req, res) {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏
const activeUsers = new Map();
const messages = [];
const MAX_MESSAGES = 1000;

// –î–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
const demoUsers = [
  { id: 1, username: 'testuser', password: '123456', avatar: 'ü¶ä' },
  { id: 2, username: 'alice', password: '123456', avatar: 'üê∞' },
  { id: 3, username: 'bob', password: '123456', avatar: 'üêª' }
];

// API Routes
app.post('/api/register', function(req, res) {
  const username = req.body.username;
  const password = req.body.password;
  
  if (!username || !password) {
    return res.status(400).json({ error: 'Username and password required' });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const existingUser = demoUsers.find(function(u) { return u.username === username; });
  if (existingUser) {
    return res.status(400).json({ error: 'Username already exists' });
  }

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const newUser = {
    id: demoUsers.length + 1,
    username: username,
    password: password,
    avatar: 'üë§'
  };
  
  demoUsers.push(newUser);
  
  res.json({ 
    success: true, 
    user: {
      id: newUser.id,
      username: newUser.username,
      avatar: newUser.avatar
    }
  });
});

app.post('/api/login', function(req, res) {
  const username = req.body.username;
  const password = req.body.password;
  
  if (!username || !password) {
    return res.status(400).json({ error: 'Username and password required' });
  }

  // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const user = demoUsers.find(function(u) { 
    return u.username === username && u.password === password; 
  });
  
  if (!user) {
    return res.status(400).json({ error: 'Invalid credentials' });
  }

  res.json({
    success: true,
    user: {
      id: user.id,
      username: user.username,
      avatar: user.avatar,
      status: 'online'
    }
  });
});

// Socket.io –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
io.on('connection', function(socket) {
  console.log('–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:', socket.id);

  socket.on('user_authenticated', function(userData) {
    const user = {
      id: userData.id,
      username: userData.username,
      avatar: userData.avatar,
      socketId: socket.id,
      status: 'online'
    };

    activeUsers.set(socket.id, user);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    socket.emit('message_history', messages);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    socket.broadcast.emit('user_joined', {
      username: user.username,
      avatar: user.avatar,
      message: user.username + ' –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É',
      timestamp: new Date()
    });
    
    updateOnlineUsers();
  });

  socket.on('send_message', function(data) {
    const user = activeUsers.get(socket.id);
    if (user && data.content && data.content.trim()) {
      const message = {
        id: Date.now().toString(),
        user_id: user.id,
        username: user.username,
        avatar: user.avatar,
        content: data.content.trim(),
        created_at: new Date()
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      messages.push(message);
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏
      if (messages.length > MAX_MESSAGES) {
        messages.shift(); // –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      }
      
      io.emit('new_message', message);
    }
  });

  socket.on('disconnect', function() {
    const user = activeUsers.get(socket.id);
    if (user) {
      activeUsers.delete(socket.id);
      
      socket.broadcast.emit('user_left', {
        username: user.username,
        avatar: user.avatar,
        message: user.username + ' –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç',
        timestamp: new Date()
      });
      
      updateOnlineUsers();
    }
  });

  function updateOnlineUsers() {
    const onlineUsers = Array.from(activeUsers.values()).map(function(user) {
      return {
        id: user.id,
        username: user.username,
        avatar: user.avatar,
        status: user.status
      };
    });
    
    io.emit('online_users', onlineUsers);
  }
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, function() {
  console.log('üí¨ NeoConnect —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ' + PORT);
  console.log('üë• –î–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: testuser/123456, alice/123456, bob/123456');
  console.log('üåê –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:' + PORT);
});
